<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python_Learning</title>
      <link href="/posts/bbd86653.html"/>
      <url>/posts/bbd86653.html</url>
      
        <content type="html"><![CDATA[<h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day_1"></a>Day_1</h1><p>安装了3.13.1版本以及pycharm</p><h2 id="注释方法"><a href="#注释方法" class="headerlink" title="注释方法"></a>注释方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是单行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这里是多行注释,双引号也可以</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h2><p>由“\”连接多行语句,括号中的多行语句不需要</p><h2 id="print—输出"><a href="#print—输出" class="headerlink" title="print—输出"></a>print—输出</h2><ul><li>print默认输出换行</li><li>想要实现不换行在末尾加上<code>end=&quot;&quot;</code></li></ul><h2 id="库的导入和函数导入"><a href="#库的导入和函数导入" class="headerlink" title="库的导入和函数导入"></a>库的导入和函数导入</h2><p><code>import</code> <code>from...import</code></p><h2 id="关于运算符"><a href="#关于运算符" class="headerlink" title="关于运算符"></a>关于运算符</h2><p>“&#x2F;“ 和 “&#x2F;&#x2F;“ 分别是除和取整<br>**  幂运算<br><strong>特别的</strong>,<code>*</code>运算符还可以用于字符串，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">20</span>)</span><br><span class="line"><span class="comment">#打印结果如下</span></span><br><span class="line"><span class="comment">#--------------------</span></span><br></pre></td></tr></table></figure><p>逻辑运算符和C不同,用<code>and</code> <code>or</code> <code>not</code></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><strong>不可变数据</strong> :number,string,tuple(元组) <code>可以看成是静态的</code></li><li><strong>可变数据</strong> : list, dictionary, set<blockquote><p>不可变数据类型： 当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变，对于这种数据类型，就称不可变数据类型。</p><p>可变数据类型 ：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址不发生改变，对于这种数据类型，就称可变数据类型。</p></blockquote></li></ul><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><p>int (包含bool类型)<br>float <code>2.8e2 = 280</code><br>complex 可以用<code>a+bj</code>&#x2F;<code>complex(a,b)</code>表示  其中a和b均为float类型</p><h4 id="数字类型转换"><a href="#数字类型转换" class="headerlink" title="数字类型转换"></a>数字类型转换</h4><ul><li><code>int(x)</code></li><li><code>float(x)</code></li><li><code>complex(x)</code></li><li><code>complex(x,y)</code></li></ul><h4 id="常用数学函数"><a href="#常用数学函数" class="headerlink" title="常用数学函数"></a>常用数学函数</h4><ul><li><code>abs(x)</code></li><li><code>fabs(x)</code> 上个函数的float版本,返回float值</li><li><code>ceil</code> <code>floor</code> 上下界</li><li><code>max(x1,x2,...)</code> <code>min(x1,x2,...)</code></li><li><code>pow(x,y)</code></li><li><code>round(x,[,n])</code> 四舍五入到小数点后n位</li></ul><h4 id="随机数函数"><a href="#随机数函数" class="headerlink" title="随机数函数"></a>随机数函数</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>choice(seq)</td><td>从序列元素中随机选</td></tr><tr><td>randrange([start,]stop[,step])</td><td>在指定范围内按步长随机选</td></tr><tr><td>random()</td><td>[0,1)内随机</td></tr><tr><td>shuffle(lst)</td><td>将序列随机排序</td></tr><tr><td>uniform(x,y)</td><td>在[x,y]的随机实数</td></tr></tbody></table><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><ul><li>在python中,字符串用<code>&#39;</code>或者<code>&quot;</code>括起来,同时使用<code>\</code>转义特殊字符<br><code>+</code> 连接<br><code>*</code> 重复<br><code>[]</code> 通过索引获取该位字符, a&#x3D;’Hello’ a[1]&#x3D;’e’<br><code>[:]</code>截取一段字符,a[1:4]&#x3D;’ell’  <strong>右侧是开区间</strong><br><code>in</code> 成员运算符,包含该字符则输出true<br><code>not in</code> 反之</li></ul><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Month = <span class="string">&#x27;December&#x27;</span></span><br><span class="line">Date = <span class="number">13</span></span><br><span class="line"><span class="comment"># format_1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Today is %s,%d&#x27;</span> % (Month,Date))</span><br><span class="line"><span class="comment"># format_2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Today is <span class="subst">&#123;Month&#125;</span>,<span class="subst">&#123;Date&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tup1(<span class="string">&#x27;Hello&#x27;</span>,<span class="string">&#x27;World&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(tup1) </span><br><span class="line"><span class="comment">#(&#x27;Hello&#x27;,&#x27;World&#x27;,1,2)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tup1</span><br><span class="line">  <span class="built_in">print</span>(i,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment"># Hello World 1 2</span></span><br></pre></td></tr></table></figure><h4 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h4><p><code>len()</code> 元素个数<br><code>+</code> <code>*</code> <code>in</code> <code>[]</code> &#96;[:]</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>列表在<code>[]</code>中,并且和tuple最大的不同是它是可以改变的<br>另外,list中各元素类型可以不同,并且可以嵌套</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">x = [a,b]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment"># [[1,2,3],[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]]</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>])  <span class="comment"># [1,2,3]</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>][<span class="number">1</span>])  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h4 id="常用操作-1"><a href="#常用操作-1" class="headerlink" title="常用操作"></a>常用操作</h4><p><code>list.append(x)</code> 以下省略list<br><code>.count(x)</code> <code>.index(x)</code> <code>insert(index,x)</code><br><code>.pop(index)</code>(默认index&#x3D;-1,移除最后一个,并返回该值)<br><code>.reverse()</code> <code>.sort(cmp=None, key=None, reverse=False)</code><br>cmp是可选参数, key是比较元素, reverse为True即降序, 默认为False升序排列<br><code>.clear()</code>  <code>.copy()</code></p><blockquote><p><em>关于copy的一点思考</em><br>为什么不直接用list1 &#x3D; list2呢?</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list1 = list2  <span class="comment"># 这里没有创建副本，只是创建了一个新的引用</span></span><br><span class="line"></span><br><span class="line">list1.append(<span class="number">4</span>)  <span class="comment"># 修改list1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list2)  <span class="comment"># 输出将是 [1, 2, 3, 4],因为list1和list2指向同一个列表</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list1 = list2.copy()  <span class="comment"># 使用copy()方法创建一个浅拷贝</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">list1 = list2[:]  <span class="comment"># 使用切片操作创建一个浅拷贝</span></span><br><span class="line"></span><br><span class="line">list1.append(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list2)  <span class="comment"># 输出 [1, 2, 3],因为list1现在是list2的一个独立副本</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">list2 = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">list1 = copy.deepcopy(list2)  <span class="comment"># 创建一个深拷贝</span></span><br><span class="line"></span><br><span class="line">list1[<span class="number">0</span>].append(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list2)  <span class="comment"># 输出 [[1, 2], [3, 4]],因为list1现在是list2的一个完全独立的副本</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">list2 = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">list1 = copy.copy(list2)  <span class="comment"># 创建一个浅拷贝</span></span><br><span class="line"></span><br><span class="line">list1[<span class="number">0</span>].append(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list2)  <span class="comment"># 输出 [[1, 2, 5], [3, 4]]</span></span><br></pre></td></tr></table></figure><p>关于浅拷贝和深拷贝的原理可以参考下图:<br><img src="/img/ShallowCopy_DeepCopy.png" alt="原理"></p><h3 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1:value1, key2:value2, key3:value&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意:值可以取任何数据类型,键只能为不可变类型(string,num,tup)</p></blockquote><h4 id="常用操作-2"><a href="#常用操作-2" class="headerlink" title="常用操作"></a>常用操作</h4><ul><li>访问字典 <code>dict[key]</code></li><li>修改字典 <code>dict[key] = newvalue</code></li><li>遍历字典 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">dict</span>.keys():  <span class="comment">#遍历key</span></span><br><span class="line">  <span class="built_in">print</span>(key)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">dict</span>.values():  <span class="comment">#遍历value</span></span><br><span class="line">  <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure></li></ul><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><strong>set本身可变,但set中的元素不可变</strong></p><blockquote><p>不可变的根本原因:集合中的元素位置实际上是通过哈希值来确定的<br>只有不可变类型才是可哈希的</p></blockquote><h4 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&#x27;小黑&#x27;</span>,<span class="number">20</span>,<span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set1) <span class="comment"># &#123;&#x27;小黑&#x27;, 20&#125; ;元素不重复只显示一个20</span></span><br><span class="line"></span><br><span class="line">set2 = <span class="built_in">set</span>(<span class="string">&#x27;abcd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(set2) <span class="comment"># &#123;&#x27;c&#x27;, &#x27;b&#x27;, &#x27;d&#x27;, &#x27;a&#x27;&#125; ; 元素没有顺序</span></span><br></pre></td></tr></table></figure><ol><li>建立空集合必须用<code>set()</code>,<code>&#123;&#125;</code>会创建空字典</li><li>set()内的参数是可迭代的,会把它<em>拆分</em>放进集合内</li></ol><h4 id="集合的修改"><a href="#集合的修改" class="headerlink" title="集合的修改"></a>集合的修改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&#x27;小黑&#x27;</span>,<span class="number">20</span>,<span class="number">20</span>&#125;</span><br><span class="line">set1.add(<span class="string">&#x27;大学生&#x27;</span>) <span class="comment">#add()：添加方法</span></span><br><span class="line"><span class="built_in">print</span>(set1) <span class="comment"># &#123;&#x27;大学生&#x27;, &#x27;小黑&#x27;, 20&#125;</span></span><br><span class="line"></span><br><span class="line">set1.update([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>])  <span class="comment"># update()：也可以添加元素，且参数可以是列表，元组，字典等</span></span><br><span class="line"><span class="built_in">print</span>(set1) <span class="comment"># &#123;1, &#x27;大学生&#x27;, 2, 3, 4, 20, &#x27;小黑&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">set1.remove(<span class="string">&#x27;大学生&#x27;</span>)  <span class="comment"># remove()：移除元素</span></span><br><span class="line"><span class="built_in">print</span>(set1) <span class="comment"># &#123;1, 2, 3, 4, 20, &#x27;小黑&#x27;&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>add()</code>的参数只能是不可变的</li><li><code>update()</code>的参数只能是可迭代的<br><strong>set不支持索引赋值</strong> 其元素是不可变的</li></ul><h4 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> set1:</span><br><span class="line">  <span class="built_in">print</span>(i, end = <span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>int() bool() float() str()<br>list() tumple() set() 对dict类型转换时获取的是key</p><h1 id="Day-2"><a href="#Day-2" class="headerlink" title="Day_2"></a>Day_2</h1><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>if   …:<br>  …<br>elif  …:<br>  …<br>else:<br>  …</p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>while …:<br>   …<br>else:<br>  …</p><p>for <variable> in <sequence>:<br>    …<br><variable>:存储元素的变量 ;<sequence>:遍历的对象<br>else: …</p><h2 id="break-continue"><a href="#break-continue" class="headerlink" title="break,continue"></a>break,continue</h2><h2 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">pass</span> <span class="comment">#没写语句时,加上pass就不会报错</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><p>def funcname():<br>  …</p><h3 id="函数的文档注释"><a href="#函数的文档注释" class="headerlink" title="函数的文档注释"></a>函数的文档注释</h3><p>在定义函数下方,用(连续三对引号)</p><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><h3 id="import使用已编写的全局变量和函数"><a href="#import使用已编写的全局变量和函数" class="headerlink" title="import使用已编写的全局变量和函数"></a>import使用已编写的全局变量和函数</h3><p><code>mode.var</code>  <code>mode.fun</code></p><h3 id="pyc文件"><a href="#pyc文件" class="headerlink" title="pyc文件"></a>pyc文件</h3><p>已编译的py文件,是二进制字节码</p><h2 id="变量类型-2"><a href="#变量类型-2" class="headerlink" title="变量类型_2"></a>变量类型_2</h2><h3 id="del关键字"><a href="#del关键字" class="headerlink" title="del关键字"></a>del关键字</h3><p><code>del</code> 会将变量从内存中删除,后续不可再使用该变量<br>因此,想要删除数据,还是用remove(),pop()等方法</p><h2 id="名片管理系统"><a href="#名片管理系统" class="headerlink" title="名片管理系统"></a>名片管理系统</h2><h3 id="搭建框架"><a href="#搭建框架" class="headerlink" title="搭建框架"></a>搭建框架</h3><p>一个主程序, 一个写名片功能函数,一个写输入函数</p><h3 id="编写主程序"><a href="#编写主程序" class="headerlink" title="编写主程序"></a>编写主程序</h3><p>用<code>while True:</code>无限循环让用户决定退出程序的时机</p><blockquote><p>在<code>#</code>后跟上<code>todo</code>, 标记需要去做的工作</p></blockquote><h3 id="在cards-tools中增加功能函数"><a href="#在cards-tools中增加功能函数" class="headerlink" title="在cards_tools中增加功能函数"></a>在<code>cards_tools</code>中增加功能函数</h3><p>记得在主程序中导入tools模块</p><h3 id="保存名片的数据结构"><a href="#保存名片的数据结构" class="headerlink" title="保存名片的数据结构"></a>保存名片的数据结构</h3><p>用字典记录名片信息,列表容纳所有名片字典</p><h3 id="写输入函数"><a href="#写输入函数" class="headerlink" title="写输入函数"></a>写输入函数</h3><p>实现只有输入才会返回输入值,没有输入则返回原值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">input_card_info</span>(<span class="params">dict_value, tip</span>):</span><br><span class="line">    result_str = <span class="built_in">input</span>(tip)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(result_str) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> result_str</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> dict_value</span><br></pre></td></tr></table></figure><h1 id="Day-3"><a href="#Day-3" class="headerlink" title="Day_3"></a>Day_3</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><code>id()</code>函数可以查看变量中保存数据所在的内存地址</p><blockquote><p>如果一个变量已经被定义,当给它赋值时,其实是<strong>修改了数据的引用</strong><br>变量改为对新数据的引用</p></blockquote><h3 id="函数传值"><a href="#函数传值" class="headerlink" title="函数传值"></a>函数传值</h3><p>参数和返回值都是靠引用来传递的</p><h3 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h3><p>全局变量要写在程序的最前面以便后面使用(python就这样)<br>最好加上<code>g_</code>的前缀方便辨识</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">  num = <span class="number">100</span></span><br><span class="line">  <span class="built_in">print</span>(num)  <span class="comment">#100</span></span><br></pre></td></tr></table></figure><p>函数内部只能通过全局变量的引用获得对应的数据,但不能<em>直接</em>修改其引用<br>以上的例子中,函数中的num是局部变量,只是名字与全局变量相同</p><p>用<code>global</code>可以在函数内部修改全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo1</span>():</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;demo1&quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># global 关键字，告诉 Python 解释器 num 是一个全局变量</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(num)   <span class="comment">#100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo2</span>():</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;demo2&quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(num)   <span class="comment">#100</span></span><br><span class="line"></span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h2><p>在函数内,如果全局变量是可变类型,使用类型方法可以在不改变引用的基础上修改全局变量的内容</p><blockquote><p>通过元组可以实现”同时返回多个值”<br>在python中,可以讲一个元组使用赋值语句同时赋值给多个变量</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = temp, wetness = measure()</span><br></pre></td></tr></table></figure><blockquote><p>用元组可以交换两个变量的值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure><ul><li>在python中,列表变量调用<code>+=</code>本质上是在执行列表变量的<code>entend</code>方法,不会修改变量引用</li></ul><h3 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gl_num_list = [<span class="number">6</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认就是升序排序，因为这种应用需求更多</span></span><br><span class="line">gl_num_list.sort()</span><br><span class="line"><span class="built_in">print</span>(gl_num_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有当需要降序排序时，才需要传递 `reverse` 参数</span></span><br><span class="line">gl_num_list.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(gl_num_list)</span><br></pre></td></tr></table></figure><ul><li>在参数后使用赋值语句,可以指定参数的缺省参数</li><li>缺省参数必须在参数列表末尾</li></ul><h3 id="多值参数"><a href="#多值参数" class="headerlink" title="多值参数"></a>多值参数</h3><h2 id="面向对象基础语法"><a href="#面向对象基础语法" class="headerlink" title="面向对象基础语法"></a>面向对象基础语法</h2><p>类的定义如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">方法1</span>(<span class="params">self, 参数列表</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">方法2</span>(<span class="params">self, 参数列表</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>创建对象:<code>对象变量 = 类名()</code></p><h3 id="self"><a href="#self" class="headerlink" title="self"></a>self</h3><p>self在类内部,指代该对象</p><ul><li>在类的外部, 通过<code>变量名.</code>访问对象的属性和方法</li><li>在类的内部, 通过<code>self.</code>访问对象的属性和方法</li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>对象内置方法<code>_init_</code>会在创建对象时被自动调用<br>在<code>__init__</code>内定义属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">    </span><br><span class="line">tom = Cat(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>把预设的属性值定义成<code>__init__</code>的参数</li><li>在方法内部使用<code>self.属性 = 形参</code>接收外部传递的参数</li><li>在创建对象时,使用<code>类名(属性1,属性2)</code>调用</li></ol><h3 id="私有属性和方法"><a href="#私有属性和方法" class="headerlink" title="私有属性和方法"></a>私有属性和方法</h3><ul><li>只能在对象的内部使用,无法从外部访问<br><code>__secret</code>  <code>__secret(self):</code></li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>面向对象三大特性</p><ol><li>封装  根据职责将属性和方法封装到一个抽象的类中</li><li>继承  实现代码的重用, 相同的代码无需重复编写</li><li>多态  不同的对象调用相同的方法, 产生不同的执行结果, 增加代码的灵活度</li></ol><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">父类名</span>):</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>super()</code>相当于父类名,继承其所有属性方法</p><h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">game</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 蹦蹦跳跳的玩耍...&quot;</span> % <span class="variable language_">self</span>.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XiaoTianDog</span>(<span class="title class_ inherited__">Dog</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">game</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 飞到天上去玩耍...&quot;</span> % <span class="variable language_">self</span>.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">game_with_dog</span>(<span class="params">self, dog</span>):</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 和 %s 快乐的玩耍...&quot;</span> % (<span class="variable language_">self</span>.name, dog.name))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 让狗玩耍</span></span><br><span class="line">        dog.game()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建一个狗对象</span></span><br><span class="line"><span class="comment"># wangcai = Dog(&quot;旺财&quot;)</span></span><br><span class="line">wangcai = XiaoTianDog(<span class="string">&quot;飞天旺财&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建一个小明对象</span></span><br><span class="line">xiaoming = Person(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 让小明调用和狗玩的方法</span></span><br><span class="line">xiaoming.game_with_dog(wangcai)</span><br></pre></td></tr></table></figure><ul><li>Person 类中只需要让狗对象调用game方法,不关心是什么狗</li><li>game 方法是在Dog父类中定义的</li><li>在程序执行时,传入不同的dog对象,就会产生不同的执行效果</li></ul><h3 id="类属性和类方法"><a href="#类属性和类方法" class="headerlink" title="类属性和类方法"></a>类属性和类方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tool</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用赋值语句，定义类属性，记录创建工具对象的总数</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 针对类属性做一个计数+1</span></span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建工具对象</span></span><br><span class="line">tool1 = Tool(<span class="string">&quot;斧头&quot;</span>)</span><br><span class="line">tool2 = Tool(<span class="string">&quot;榔头&quot;</span>)</span><br><span class="line">tool3 = Tool(<span class="string">&quot;铁锹&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 知道使用 Tool 类到底创建了多少个对象?</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在创建了 %d 个工具&quot;</span> % Tool.count)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">类方法名</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>@classmethod</code>是修饰器,告诉解释器这是一个类方法<br>类方法的第一个参数是<code>cls</code></p><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">静态方法名</span>():</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 游戏最高分，类属性</span></span><br><span class="line">    top_score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_help</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;帮助信息：让僵尸走进房间&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_top_score</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏最高分是 %d&quot;</span> % cls.top_score)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, player_name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.player_name = player_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_game</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[%s] 开始游戏...&quot;</span> % <span class="variable language_">self</span>.player_name)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用类名.修改历史最高分</span></span><br><span class="line">        Game.top_score = <span class="number">999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 查看游戏帮助</span></span><br><span class="line">Game.show_help()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看游戏最高分</span></span><br><span class="line">Game.show_top_score()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建游戏对象，开始游戏</span></span><br><span class="line">game = Game(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line"></span><br><span class="line">game.start_game()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 游戏结束，查看游戏最高分</span></span><br><span class="line">Game.show_top_score()</span><br></pre></td></tr></table></figure><h2 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MusicPlayer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录第一个被创建对象的引用</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 记录是否执行过初始化动作</span></span><br><span class="line">    init_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 判断类属性是否是空对象</span></span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 2. 调用父类的方法，为第一个对象分配空间</span></span><br><span class="line">            cls.instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 返回类属性保存的对象引用</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> MusicPlayer.init_flag:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;初始化音乐播放器&quot;</span>)</span><br><span class="line"></span><br><span class="line">            MusicPlayer.init_flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多个对象</span></span><br><span class="line">player1 = MusicPlayer()</span><br><span class="line"><span class="built_in">print</span>(player1)</span><br><span class="line"></span><br><span class="line">player2 = MusicPlayer()</span><br><span class="line"><span class="built_in">print</span>(player2)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新的开始</title>
      <link href="/posts/b585e161.html"/>
      <url>/posts/b585e161.html</url>
      
        <content type="html"><![CDATA[<h1 id="建站初心"><a href="#建站初心" class="headerlink" title="建站初心"></a>建站初心</h1><p>其实很早之前就想建一个站记录自己的学习和生活了。<br>但是写在csdn上面又觉得不美观，很难受，自己做一个又未免太过麻烦。<br>在决定休学的这一周里，开始用<code>hexo+github</code>建站。<br>效果真的很好，远比我想象的简单，不用学习前置的前端三件套知识就能做。<br>在这个站里，我会记录自己的学习过程，或许偶尔聊聊闲话。<br>希望自己能够在计算机的漫漫长路上坚定不移地走下去。   </p><p>没错，我并不是因为喜欢这个专业才来的，但是我希望自己在离开大学的时候能够自信地说<br>自己真的很喜欢计算机。<br>希望自己能够在学习的过程中爱上它。  </p><h1 id="CS-SE-网安"><a href="#CS-SE-网安" class="headerlink" title="CS&#x2F;SE&#x2F;网安?"></a>CS&#x2F;SE&#x2F;网安?</h1><p>计算机专业课程重合度很高，但是最后的出路和走向却可能大不相同。<br>但是要我说的话，当黑客才是最酷的吧（<br>虽然我现在基本啥也不会啥也不知道，但是CTF看上去真的比ACM要帅<br>没事，休学就是让自己慢慢学慢慢了解的。</p><h2 id="CTF学习方向"><a href="#CTF学习方向" class="headerlink" title="CTF学习方向?"></a>CTF学习方向?</h2><p>都说CFT很驳杂，一个人不肯能全学<br>作为一个普通人，我肯定不自认为一定能比前辈们更厉害，<br>所以我肯定将来要选择一个主攻方向<br>但是在此之前，还是尽可能把几个方向的基础知识学完，然后看自己喜欢和擅长的再去抉择。  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test1</title>
      <link href="/posts/8ab2dce2.html"/>
      <url>/posts/8ab2dce2.html</url>
      
        <content type="html"><![CDATA[<p>This is a testing article. I never have a try on markdown.<br>然后我来打几个中文字符试试。  </p><h1 id="新的开始"><a href="#新的开始" class="headerlink" title="新的开始"></a>新的开始</h1><h2 id="code-test"><a href="#code-test" class="headerlink" title="code test"></a>code test</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
